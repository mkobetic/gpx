<%
package main
import "fmt"
import "time"

func (m *Map) render(w io.Writer, t *Track) {
%>
<svg version="1.1" xmlns="http://www.w3.org/2000/svg"
    width="100%" height="100%" id="root">
    <style type="text/css" >
        <![CDATA[
            .segment { fill: none; stroke-width: 4 }
            .segment:hover { stroke-width: 8 }
            .timeline-segment { fill: blue; fill-opacity: 30%; stroke: blue }
            .timeline-segment:hover { fill: yellow; fill-opacity: 30%; stroke-width: 4 }
            .timeline-segment-rect { fill: transparent }
            .timeline-segment-rect:hover { stroke-width: 2; stroke: black }
        ]]>
    </style>
    <g id="legend">
        <% for i := range palette { %>
        <rect x="<%= 30*i %>" y="0" width="30" height="20" fill="<%= fmt.Sprintf("#%03x",palette[i]) %>"/>
        <% } %>
        <% for i := 0; i < len(palette); i += 5 {
            color := "black" 
            if i == 0 { color = "white" }
        %>
        <text x="<%= 30*i+5 %>" y="16" fill="<%= color %>"><%= fmt.Sprint(i) %>kts</text>
        <% } %>
    </g>
    <svg id="map" x="0" y="21" width="100%" viewBox="0 0 <%= m.w %> <%= m.h %>">
        <!-- Invisible rectangle covering the whole viewport is needed so that mouse events are captured
            by the #map element whenever the mouse pointer is anywhere in the viewport -->
        <rect id="background" width="<%= m.w %>" height="<%= m.h %>" fill="transparent"/>
    <%  totalDistance := float64(0)
        var lastPoint *Point
        for _, segment := range t.Segments {
    %>
        <g class="segment">
            <% if lastPoint != nil {
                prev, next := lastPoint, segment.Points[0]
                x1, y1 := m.Point(prev.gpx)
                x2, y2 := m.Point(next.gpx)
                c := m.SpeedColor(next.Speed)
                totalDistance += next.Distance
                timestamp := next.gpx.Timestamp.In(t.Timezone()).Format(time.TimeOnly)
            %>
            <line class="step" x1="<%= x1 %>" y1="<%= y1 %>" x2="<%= x2 %>" y2="<%= y2 %>" stroke="<%= c %>">
            <title><%= timestamp %> <%= next.ShortString() %> = <%= fmt.Sprintf("%0.2f nm", totalDistance) %>
<%= segment.String() %>
<%= segment.TypeString() %></title>
            </line>
            <% } %>
            <% segment.EachPair(func(prev, next *Point) {
                lastPoint = next
                x1, y1 := m.Point(prev.gpx)
                x2, y2 := m.Point(next.gpx)
                c := m.SpeedColor(next.Speed)
                totalDistance += next.Distance
                timestamp := next.gpx.Timestamp.In(t.Timezone()).Format(time.TimeOnly)
            %>
            <line class="step" x1="<%= x1 %>" y1="<%= y1 %>" x2="<%= x2 %>" y2="<%= y2 %>" stroke="<%= c %>">
            <title><%= timestamp %>: <%= next.ShortString() %> = <%= fmt.Sprintf("%0.2f nm", totalDistance/1852) %>
    <%= segment.ShortString() %>
    <%= segment.TypeString() %></title>
            </line>
            <% }) %>
        </g>
	<% } %>
    </svg>
    <svg id="timeline" x="20" y="100" width="95%" height="50" preserveAspectRatio="none" viewBox="0 0 <%= t.Duration.Seconds() %> <%= tlHeight %>">
        <% 
        offset := 0
        for _, segment := range t.Segments {
            width := int(segment.Duration.Seconds())
        %>
            <polygon class="timeline-segment" points="<%= segment.Timeline(offset)%>"/>
            <rect class="timeline-segment-rect" x="<%= offset %>" y="0" width="<%= width %>" height="<%= tlHeight %>"/>
        <%
            offset += int(segment.Duration.Seconds())
        }
        %>
    </svg>
    <script>
<%= script %>
    </script>
</svg>
<% } %>